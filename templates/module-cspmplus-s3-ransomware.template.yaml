AWSTemplateFormatVersion: 2010-09-09
Description: "Set up a S3 ransomware scenario that can be prevented and investigated with Lacework."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "S3 Object to Copy"
        Parameters:
          - S3BucketName
          - S3KeyPrefix
          - S3Object
    ParameterLabels:
      S3BucketName:
        default: S3 Bucket
      S3KeyPrefix:
        default: S3 Key Prefix
      S3Object:
        default: S3 Object

Parameters:
  S3BucketName:
    Type: String
    Default: lacework-alliances
    MinLength: '1'
    Description: "S3 bucket for assets. Use this if you want to customize your deployment. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but it cannot start or end with hyphens (-)."
  S3KeyPrefix:
    Type: String
    Default: awsimmersionday
    MinLength: '1'
    Description: "S3 key prefix for assets directory. Use this if you want to customize your deployment. The prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). For more information, see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html."
  S3Object:
    Type: String
    Default: /app/app.zip
    MinLength: '1'
    Description: "S3 object to copy. Use this if you want to customize your deployment."
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "RansomwareTargetBucket"
      AccessControl: "public-read-write"

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref S3Bucket
      SourceBucket: !Ref 'S3BucketName'
      Prefix: !Ref 'S3KeyPrefix'
      Objects:
        - !Ref S3Object

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/${S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/${S3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  ####### Bastion VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "172.16.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-eks-vpc"
    DependsOn:
      - ElasticIPNatGateway

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn:
      - VPCGatewayAttachment
      - PublicRouteTable
      - InternetGateway

  ####### Subnet

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet A
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: "172.16.3.0/24"
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-eks-PublicSubnetA"

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - PublicRoute

  ElasticIPNatGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPNatGateway.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub "${AWS::AccountId}-eks-nat-gateway"
    DependsOn:
      - ElasticIPNatGateway
      - PublicSubnetA

  ################# Bastion Host
  BastionASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - VPC
    Properties:
      AutoScalingGroupName: !Join ["", [!Ref "AWS::StackName", "BastionHostASG"]]
      LaunchConfigurationName: !Ref BastionLaunchConfig
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "1"
      Tags:
        -
          Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-BastionHost"]]
          PropagateAtLaunch: true

  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Join ["", [!Ref "AWS::StackName", "BastionHostLaunchConfiguration"]]
      AssociatePublicIpAddress: true
      ImageId: "ami-0142f6ace1c558c7d"
      InstanceType: t3.micro
      IamInstanceProfile: !Ref BastionProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref BastionSecurityGroup

  BastionProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: BastionRole

  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: EksAllAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: eks:*
                Resource: "*"
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Join ['', ['arn:aws:ssm:*:', !Ref 'AWS::AccountId', ':parameter/aws/*' ]]
                  - "arn:aws:ssm:*::parameter/aws/*"
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:DescribeKey
                Resource: "*"
        - PolicyName: IamLimitedAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:GetInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:AddRoleToInstanceProfile
                  - iam:ListInstanceProfilesForRole
                  - iam:PassRole
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRolePolicy
                  - iam:GetOpenIDConnectProvider
                  - iam:CreateOpenIDConnectProvider
                  - iam:DeleteOpenIDConnectProvider
                  - iam:TagOpenIDConnectProvider
                  - iam:ListAttachedRolePolicies
                  - iam:TagRole
                Resource:
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':instance-profile/eksctl-*' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/eksctl-*' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':oidc-provider/*' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/eksctl-managed-*' ]]
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/*' ]]
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: "*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName:
                      - eks.amazonaws.com
                      - eks-nodegroup.amazonaws.com
                      - eks-fargate.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VPC
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref VPC
      GroupName: !Join ["", [ !Ref "AWS::StackName", "BastionHostSecurityGroup"]]

  SecurityGroupSshIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: "tcp"
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"

#########
Outputs:
  S3Bucket:
    Value: !Ref S3Bucket
