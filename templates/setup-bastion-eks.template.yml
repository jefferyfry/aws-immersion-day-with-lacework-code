AWSTemplateFormatVersion: 2010-09-09
Description: "Set up a Bastion Host and EKS cluster."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - VpcId
          - PublicSubnetA
          - PublicSubnetB
          - LaceworkAccountName
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - KeyName
    ParameterLabels:
      VpcId:
        default: VPC ID
      PublicSubnetA:
        default: Public Subnet A
      PublicSubnetB:
        default: Public Subnet B
      LaceworkAccountName:
        default: Lacework Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      KeyName:
        default: AWS SSH Key for Bastion
Mappings:
  BastionAmiMap:
    eu-north-1:
      ami: ami-09733597242dc581b
    ap-south-1:
      ami: ami-0108d6a82a783b352
    eu-west-3:
      ami: ami-00bf323ac99d8bbbb
    eu-west-2:
      ami: ami-0c0a1cc13a52a158f
    eu-west-1:
      ami: ami-09ce2fc392a4c0fbc
    ap-northeast-3:
      ami: ami-0757d9e44f1490914
    ap-northeast-2:
      ami: ami-003ef1c0e2776ea27
    ap-northeast-1:
      ami: ami-0404778e217f54308
    sa-east-1:
      ami: ami-02edf5731752693cc
    ca-central-1:
      ami: ami-09321d7714bae0aab
    ap-southeast-1:
      ami: ami-03326c3f2f37e56a4
    ap-southeast-2:
      ami: ami-0c9f90931dd48d1f2
    eu-central-1:
      ami: ami-0bd99ef9eccfee250
    us-east-1:
      ami: ami-04902260ca3d33422
    us-east-2:
      ami: ami-0d718c3d715cec4a7
    us-west-1:
      ami: ami-0d5075a2643fdf738
    us-west-2:
      ami: ami-0142f6ace1c558c7d
Parameters:
  VpcId:
    Type: String
    Description: Id of VPC stack to build off of
    Default: VpcId
  PublicSubnetA:
    Type: String
    Description: Public subnet for VPZ Zone Identifier
    Default: PublicSubnetA
  PublicSubnetB:
    Type: String
    Description: Public subnet for VPZ Zone Identifier
    Default: PublicSubnetB
  LaceworkAccountName:
    Type: String
    Description: Your Lacework account name. ie. <account name>.lacework.net
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*$'
    ConstraintDescription: Invalid Lacework account name. Account name may contain alphanumeric characters and dashes only.
  LaceworkAccessKeyID:
    Type: String
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework API Access Key ID contains alphanumeric characters and symbols only.
    Description: Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: Lacework API Secret Key contains alphanumeric characters and symbols only.
    Description: Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  BastionASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT45M
    Properties:
      AutoScalingGroupName: !Join ["", [!Ref "AWS::StackName", "BastionHostASG"]]
      LaunchConfigurationName: !Ref BastionLaunchConfig
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MinSize: "1"
      DesiredCapacity: "1"
      MaxSize: "1"
      Tags:
        -
          Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-BastionHost"]]
          PropagateAtLaunch: true

  LaceworkCrossAccountECRRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref LaceworkAccountName
          - laceworkcwsrole-sa
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: ["434813966438"]
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref AWS::StackId
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'

  BastionLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Join ["", [!Ref "AWS::StackName", "BastionHostLaunchConfiguration"]]
      AssociatePublicIpAddress: true
      ImageId:
        Fn::FindInMap:
          - BastionAmiMap
          - Ref: AWS::Region
          - ami
      InstanceType: t3.micro
      IamInstanceProfile: !Ref BastionProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref BastionSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          set -o xtrace
          pwd
          yum install -y git python3 python3-pip tar openssh-server vim-minimal bash-completion jq at && yum clean all
          #INSTALL LATEST AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          # GET AN ACCESS TOKEN FROM LACEWORK
          accesstoken=$(curl --location --request POST 'https://${LaceworkAccountName}.lacework.net/api/v2/access/tokens' \
          --header 'Content-Type: application/json' \
          --header 'X-LW-UAKS: ${LaceworkSecretKey}' \
          --data-raw '{
          "keyId": "${LaceworkAccessKeyID}",
          "expiryTime": 86400
          }' | jq -r '.token')
          # GET AN EKS AGENT TOKEN FROM LACEWORK
          eks_agent_token=$(curl --location --request POST 'https://${LaceworkAccountName}.lacework.net/api/v2/AgentAccessTokens' \
          --header 'Content-Type: application/json' \
          --header "Authorization: Bearer $accesstoken" \
          --data-raw '{
          "tokenEnabled": "1",
          "tokenAlias": "aws-immersion-day-eks-${AWS::StackId}"
          }' | jq -r '.data.accessToken')
          # GET A EC2 AGENT TOKEN FROM LACEWORK
          ec2_agent_token=$(curl --location --request POST 'https://${LaceworkAccountName}.lacework.net/api/v2/AgentAccessTokens' \
          --header 'Content-Type: application/json' \
          --header "Authorization: Bearer $accesstoken" \
          --data-raw '{
          "tokenEnabled": "1",
          "tokenAlias": "aws-immersion-day-ec2-${AWS::StackId}"
          }' | jq -r '.data.accessToken')
          # CREATE AND WAIT FOR THE EKC CLUSTER
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.25.7/2023-03-17/bin/linux/amd64/kubectl  && \
              chmod +x ./kubectl && \
              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin && \
              echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc && \
              curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64  && \
              chmod +x aws-iam-authenticator && \
              mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin && \
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && \
              sudo mv /tmp/eksctl /usr/local/bin
          eksctl create cluster --name ${AWS::AccountId}-eks-${LaceworkAccountName} --region ${AWS::Region} --ssh-access --ssh-public-key ${KeyName}
          timeout 10m bash -c -- 'while [ -z "$status" ] || [ "$status" != "\"ACTIVE\"" ]; do status=$(aws eks --region ${AWS::Region} describe-cluster --name ${AWS::AccountId}-eks-${LaceworkAccountName} --query cluster.status);echo $status; sleep 2; done'
          # GET AN INLINE SCANNER TOKEN FROM LACEWORK
          inline_scanner_token=$(curl --location --request POST 'https://${LaceworkAccountName}.lacework.net/api/v2/ContainerRegistries' \
          --header 'Content-Type: application/json' \
          --header "Authorization: Bearer $accesstoken" \
          --data-raw '{
          "name": "${AWS::AccountId}-codepipeline-scanner-${AWS::StackId}",
          "type": "ContVulnCfg",
          "enabled": 1,
          "data": {
          "registryType": "INLINE_SCANNER",
          "limitNumScan": "15"
          }
          }' | jq -r '.data.serverToken.serverToken')
          echo $inline_scanner_token
          # STORE THE SCANNER AND ECS LACEWORK TOKENS IN SSM
          aws ssm put-parameter --overwrite --region ${AWS::Region} --name "LW_ACCOUNT" --type "String" --value ${LaceworkAccountName} --overwrite
          aws ssm put-parameter --overwrite --region ${AWS::Region} --name "LW_API_KEY" --type "String" --value ${LaceworkAccessKeyID} --overwrite
          aws ssm put-parameter --overwrite --region ${AWS::Region} --name "LW_API_SECRET" --type "String" --value ${LaceworkSecretKey} --overwrite
          aws ssm put-parameter --overwrite --region ${AWS::Region} --name "ACCESS_TOKEN" --type "String" --value $accesstoken --overwrite
          aws ssm put-parameter --overwrite --region ${AWS::Region} --name "INLINE_SCANNER_TOKEN" --type "String" --value $inline_scanner_token --overwrite
          # CONFIGURE LACEWORK TO SCAN OUR ECR REPO
          ecr_scanner_response=$(curl --location --request POST 'https://${LaceworkAccountName}.lacework.net/api/v2/ContainerRegistries' \
          --header 'Content-Type: application/json' \
          --header "Authorization: Bearer $accesstoken" \
          --data-raw '{
          "name": "${AWS::AccountId}-ecr-docker-scanner-${AWS::StackId}",
          "type": "ContVulnCfg",
          "enabled": 1,
          "data": {
          "crossAccountCredentials": {
          "externalId": "${AWS::StackId}",
          "roleArn": "${LaceworkCrossAccountECRRole.Arn}"
          },
          "awsAuthType": "AWS_IAM",
          "registryType": "AWS_ECR",
          "registryDomain": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com",
          "limitNumImg": 5,
          "limitByRep": [ ],
          "nonOsPackageEval": true,
          "limitByTag": [ ],
          "limitByLabel": [ ]
          }
          }')
          echo $ecr_scanner_response
          # SETUP THE LACEWORK AGENT ON THE EKS CLUSTER
          aws eks --region ${AWS::Region} update-kubeconfig --name ${AWS::AccountId}-eks-${LaceworkAccountName}
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm version --short | cut -d + -f 1
          helm repo add lacework https://lacework.github.io/helm-charts/
          helm upgrade --install --namespace lacework --create-namespace --set laceworkConfig.accessToken=$eks_agent_token --set laceworkConfig.kubernetesCluster=${AWS::AccountId}-eks-${LaceworkAccountName} --set laceworkConfig.env=${AWS::AccountId}-eks-${LaceworkAccountName} lacework-agent lacework/lacework-agent
          # SETUP THE LACEWORK AGENT ON THIS HOST
          curl -O -sSL https://packages.lacework.net/RPMS/x86_64/lacework-prod.repo
          mv lacework-prod.repo /etc/yum.repos.d
          yum install -y lacework
          echo '{"Tokens": {"Accesstoken": "'$ec2_agent_token'"}, "serverurl": "https://api.lacework.net" }' > /var/lib/lacework/config/config.json
          # CREATE A K8S SECRET FOR ECR REPO AUTHENTICATION
          kubectl create secret docker-registry regcred \
            --docker-server=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${AWS::Region})
          # ADD ROLE TO K8s FOR ACCESS TO THE EKS CLUSTER VIA KUBECTL FOR CODEBUILD
          kubectl get configmap aws-auth -o yaml -n kube-system
          ROLE="    - rolearn: arn:aws:iam::${AWS::AccountId}:role/eks-codebuild-kubectl-role\n      username: build\n      groups:\n        - system:masters"
          kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"$ROLE\";next}1" > /tmp/aws-auth-patch.yml
          kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"
          kubectl get configmap aws-auth -o yaml -n kube-system
          # CREATE NAMESPACES
          kubectl create namespace staging-demo-app
          kubectl create namespace prod-demo-app
          # SIMULATE A RANSOMWARE SCAN
          curl -O https://lacework-alliances.s3.us-west-2.amazonaws.com/awsimmersionday/scripts/badguys.sh
          chmod a+x badguys.sh
          crontab -l > cron_bkp
          echo "*/15 * * * * /badguys.sh ${AWS::Region} ${AWS::AccountId} ${LaceworkAccountName} >/dev/null 2>&1" >> cron_bkp
          crontab cron_bkp
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionASG --region ${AWS::Region}
  BastionProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: BastionRole

  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ResourceAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: eks:*
                Resource: "*"
              - Effect: Allow
                Action: s3:*
                Resource: "*"
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource:
                  - !Join ['', ['arn:aws:ssm:*:', !Ref 'AWS::AccountId', ':parameter/*' ]]
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:DescribeKey
                Resource: "*"
        - PolicyName: IamLimitedAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:GetInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:ListInstanceProfiles
                  - iam:AddRoleToInstanceProfile
                  - iam:ListInstanceProfilesForRole
                  - iam:PassRole
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:GetRolePolicy
                  - iam:GetOpenIDConnectProvider
                  - iam:CreateOpenIDConnectProvider
                  - iam:DeleteOpenIDConnectProvider
                  - iam:TagOpenIDConnectProvider
                  - iam:ListAttachedRolePolicies
                  - iam:TagRole
                Resource:
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':instance-profile/eksctl-*' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/eksctl-*' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':oidc-provider/*' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/aws-service-role/eks-nodegroup.amazonaws.com/AWSServiceRoleForAmazonEKSNodegroup' ]]
                  - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/eksctl-managed-*' ]]
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/*' ]]
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: "*"
                Condition:
                  StringEquals:
                    iam:AWSServiceName:
                      - eks.amazonaws.com
                      - eks-nodegroup.amazonaws.com
                      - eks-fargate.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref VpcId
      GroupName: !Join ["", [ !Ref "AWS::StackName", "BastionHostSecurityGroup"]]

  SecurityGroupSshIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BastionSecurityGroup
      IpProtocol: "tcp"
      FromPort: 22
      ToPort: 22
      CidrIp: "0.0.0.0/0"
